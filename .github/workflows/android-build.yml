name: Build Android APK

# 触发条件：推送到main分支或创建tag时
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

# 环境变量
env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
    # 检出代码
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 设置Node.js环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    # 设置Java环境（Android构建需要）
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    # 安装依赖
    - name: Install dependencies
      run: npm ci
      
    # 构建Web应用
    - name: Build web app
      run: npm run build
      
    # 同步到Capacitor
    - name: Sync Capacitor
      run: npx cap sync android
      
    # 设置Android SDK
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    # 构建Android APK（Debug版本）
    - name: Build Android APK (Debug)
      working-directory: ./android
      run: |
        chmod +x ./gradlew
        ./gradlew assembleDebug
        
    # 构建Android APK（Release版本，如果有签名密钥）
    - name: Build Android APK (Release)
      if: github.event_name == 'release'
      working-directory: ./android
      env:
        # 这些需要在GitHub Secrets中配置
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # 如果有签名密钥文件，解码并保存
        if [ ! -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks
          ./gradlew assembleRelease
        else
          echo "No keystore found, building debug version"
          ./gradlew assembleDebug
        fi
        
    # 上传APK文件作为构建产物
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          android/app/build/outputs/apk/debug/*.apk
          android/app/build/outputs/apk/release/*.apk
        retention-days: 30
        
    # 如果是release事件，自动发布到GitHub Releases
    - name: Upload to GitHub Releases
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          android/app/build/outputs/apk/debug/*.apk
          android/app/build/outputs/apk/release/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    # 构建信息摘要
    - name: Build Summary
      run: |
        echo "## 🚀 构建完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Android APK" >> $GITHUB_STEP_SUMMARY
        echo "- 构建时间: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js版本: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Java版本: ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "✅ Debug APK 构建成功" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
          echo "✅ Release APK 构建成功" >> $GITHUB_STEP_SUMMARY
        fi